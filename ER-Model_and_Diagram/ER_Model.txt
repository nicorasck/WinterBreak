================================================================================
Hospital Management System:
    - This is a management system based on (but, with enhances, indeed)
    https://www.geeksforgeeks.org/how-to-design-er-diagram-for-a-hospital-management-system/
    - This will be implemented in VSCODE with C# .NET (Entity Framework).

    This system will organize data for hospital and with clear structure for the relationships.
    It will be enabling efficient data retrieval and scalability which will support key
    functionalities like management for employees, care of patients, assignments for rooms,
    test reports and payments.

    - Please find purposes for each entity below NOTES.

=================================== ER-MODEL ===================================

Entities and Attributes:

    Employee:
    - EmployeeID (PK, NOT NULL)                     -- Each employee is unique.
    - AddressID (FK, NOT NULL)                      -- References to the entity of Address.
    - FirstName (VARCHAR, NOT NULL)                 -- First Name.
    - LastName (VARCHAR, NOT NULL)                  -- Last Name.
    - BirthYear (DATE, NOT NULL)                    -- Birth Year (DateOnly in C#).
    - Gender** (ENUM, NOT NULL)                     -- BC there are several of Genders. 
    - PinCode (VARCHAR, NOT NULL)                   -- To get access in the Hospital System.  
    - Salary (INT, NOT NULL)                        -- To show the salary each Employee has.
    - WorkTitle (ENUM, NOT NULL)                    -- BC there are several of Work Titles.

    Patient:
    - PatientID (PK, NOT NULL)                      -- Each patient is unique.
    - RoomID (FK, NOT NULL)                         -- References to the entity of Room.
    - AddressID (FK, NOT NULL)                      -- References to the entity of Address.
    - FirstName (VARCHAR, NOT NULL)                 -- First Name.
    - LastName (VARCHAR, NOT NULL)                  -- Last Name.
    - BirthYear (DATE, NOT NULL)                    -- Birth Year (DateOnly in C#).
    - Gender** (ENUM, NOT NULL)                     -- BC there are several of Genders. 
    - EmergencyContactName (VARCHAR, NOT NULL)      -- Emergency Contact Name.
    - EmergencyContactNumber (VARCHAR, NOT NULL)    -- Emergency Contact Number.

    Address:                                        -- Normalizing for Employee and Patient.
    - AddressID (PK, NOT NULL)                      -- Each address is unique.
    - PhoneNumber (VARCHAR, NOT NULL)               -- Phone Number.
    - Email (VARCHAR, NOT NULL)                     -- Email.
    - Street (VARCHAR, NOT NULL)                    -- Street name and number.
    - ZipCode (VARCHAR, NOT NULL)                   -- Zip Code / Postal Code.
    - City (VARCHAR, NOT NULL)                      -- City.
    - State (VARCHAR, NULL)                         -- If it is applicable.
    - Country (VARCHAR, NOT NULL)                   -- Country.

    Room:
    - RoomID (PK, NOT NULL)                         -- Each room is unique.
    - RoomType (ENUM, NOT NULL)                     -- If there is a private room and so on. 
    - RoomCapacity (INT, NOT NULL)                  -- How many patients it can be in each room.
    - IsAvailable (BOOLEAN) (DEFAULT TRUE)          -- If the room ia available or not.
    - AdmissionDate (DATE, NOT NULL)                -- What Date the room was occupied.
    - DischargeDate (DATE, NOT NULL)                -- What Date the room was discharged.         

    TestReport:
    - TestReportID (PK, NOT NULL)                   -- Each Test Report is unique.
    - RoomID (FK, NOT NULL)                         -- References to the entity of Room. 
    - PatientID (FK, NOT NULL)                      -- References to the entity of Patient.
    - RecordID (FK, NOT NULL)                       -- References to the entity of Record.
    - TestType (VARCHAR, NOT NULL)                  -- What sort of test it is.
    - TestResult (VARCHAR, NOT NULL)                -- The result.

    Visit:
    - VisitID (PK, NOT NULL)                        -- Each Visit is unique.
    - PatientID (FK, NOT NULL)                      -- References to the entity of Patient.
    - Consultation (FK, NOT NULL)                   -- References to the entity of Consultation.
    - InvoiceID (FK, NOT NULL)                      -- References to the entity of Invoice.
    - EmployeeID (FK, NOT NULL)                     -- References to the entity of Employee.
    - VisitDate (DATE, NOT NULL)                    -- What Date and Time the Patient is coming.
    - BookingDate (DATE, NULL)                      -- If, a consultation was booked.
    - VisitReason (VARCHAR, NOT NULL)               -- What reason the Patient is visiting.

    Consultation:
    - ConsultationID (PK, NOT NULL)                 -- Each consultation is unique.
    - PatientID (FK, NOT NULL)                      -- References to the entity of Patient.
    - RoomID (FK, NOT NULL)                         -- References to the entity of Room.
    - RecordID (FK, NOT NULL)                       -- References to the entity of Record.
    - EmployeeID (FK, NOT NULL)                     -- References to the entity of Employee.
    - ConsultationType (ENUM, NOT NULL)             -- Using Enum. What sort of consultation it is.
    - ConsultationDate (DATE, NOT NULL)             -- What Date and Time the consultation was.
    - Notes (VARCHAR, NULL)                         -- If there are any other notes to add.

    Invoice:
    - InvoiceID (PK, NOT NULL)                      -- Each Invoice is unique.
    - PatientID (FK, NOT NULL)                      -- References to entity of patients.
    - DateIssued (DATE, NOT NULL)                   -- When the Invoice/Bill was sent/created.
    - PaymentStatus (ENUM, NOT NULL)                -- Using Enum, there are several of status.
    - Amount (INT, NOT NULL)                        -- Amount each Patient has to pay.

    Record:
    - RecordID (PK, NOT NULL)
    - TestReportID (FK, NOT NULL)                   -- References to the entity of TestReport.
    - RecordNumber (INT, NOT NULL)                  -- Every record book has some number for each patient.
    - AppBookNumber (INT, NOT NULL)                 -- Every app book has some number for each patient.

================================================================================

NOTES:
** The Enum for Gender is placed in Address.cs (both Employee and Patient do have Gender).


Purpose:

    Employee
        -   Get details from hospital staff and their work titles (roles).
        -   Keeping information centralized such information in the entity of Address.

    Patient
        -   Assignments for rooms and details from patients.
        -   Connecting patients to an address (to the entity of Address).

    Address
        -   To avoid duplication this is normalized for Employee and Patient (the entities).
        -   Easier to update address data.
    
    Room
        -   Managing the availability of rooms.

    Visit
        -   Logging date of visit including the reason of visit but also details for booking,
            association with invoice and consultation. 

    Consultation 
        -   Managing consultations => linking them to doctors, rooms, and records.
        -   Includes consultation details like type, date, and notes.

    TestReport
        -   Managing test reports for patients.
        -   Connecting test reports to patients and records.
    
    Invoice
        -   Managing payments.
    
    Record
        -   Centralizing documentation for tests.
        -   Ensures traceability of interactions for patients with the hospital system.

================================ ER-RELATIONSHIP ===============================

Employee and Address
    One-to-One                      Each employee do has a unique address stored in the entity
                                    of Address.

Patient and Address
    One-to-One                      Each patient do has a unique address stored in the entity
                                    of Address.

Patient and Room
    Many-to-One                     Via RoomID. A Room can have several of patients.

Visit and Consultation              
    Many-to-One                     Connects patient visits with consultations.   

Consultation and Employee
    Many-to-One                     Links consultations to specific employees (doctors, nurses).
    
Visit and Employee
    Many-to-One                     An employee can have more than one visit, but only one at the time.

TestReport and Patient
    Many-to-One                     A Patient can have several of test reports and each test reports
                                    is only linked to one patient.

Invoice and Patient
    Many-to-One                     A Patient can have several of invoices/payments and each invoices
                                    is only linked to one Patent.

Record and TestReport
    One-to-One                      Each test report is documented in a unique record.